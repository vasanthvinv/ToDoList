{"ast":null,"code":"var _jsxFileName = \"/root/todolist/src/Inputs.tsx\",\n  _s = $RefreshSig$();\nimport React, { useContext } from \"react\";\nimport { ToDoListContext } from \"./Main\";\n\n// Define the type for the context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Input = () => {\n  _s();\n  const context = useContext(ToDoListContext);\n\n  // Check if the context is undefined\n  if (!context) {\n    throw new Error(\"Input must be used within a ToDoListContext.Provider\");\n  }\n\n  // Destructure values from context\n  const {\n    state,\n    SetChange,\n    SetAdd\n  } = context;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"inputs\",\n    children: /*#__PURE__*/_jsxDEV(\"input\", {\n      placeholder: \"What needs to be done?\",\n      value: state.currentValue,\n      onChange: SetChange,\n      onKeyDown: SetAdd\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this);\n};\n_s(Input, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n_c = Input;\nexport default Input;\nvar _c;\n$RefreshReg$(_c, \"Input\");","map":{"version":3,"names":["React","useContext","ToDoListContext","jsxDEV","_jsxDEV","Input","_s","context","Error","state","SetChange","SetAdd","className","children","placeholder","value","currentValue","onChange","onKeyDown","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/root/todolist/src/Inputs.tsx"],"sourcesContent":["import React, { useContext } from \"react\";\r\nimport { ToDoListContext } from \"./Main\";\r\n\r\n// Define the type for the context\r\ninterface InputContextProps {\r\n  state: {\r\n    currentValue: string;\r\n  };\r\n  SetChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\r\n  SetAdd: (event: React.KeyboardEvent<HTMLInputElement>) => void;\r\n}\r\n\r\nconst Input: React.FC = () => {\r\n  const context = useContext(ToDoListContext);\r\n\r\n  // Check if the context is undefined\r\n  if (!context) {\r\n    throw new Error(\"Input must be used within a ToDoListContext.Provider\");\r\n  }\r\n\r\n  // Destructure values from context\r\n  const { state, SetChange, SetAdd } = context;\r\n\r\n  return (\r\n    <div className=\"inputs\">\r\n      <input\r\n        placeholder=\"What needs to be done?\"\r\n        value={state.currentValue}\r\n        onChange={SetChange}\r\n        onKeyDown={SetAdd}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Input;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,UAAU,QAAQ,OAAO;AACzC,SAASC,eAAe,QAAQ,QAAQ;;AAExC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AASA,MAAMC,KAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC5B,MAAMC,OAAO,GAAGN,UAAU,CAACC,eAAe,CAAC;;EAE3C;EACA,IAAI,CAACK,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,sDAAsD,CAAC;EACzE;;EAEA;EACA,MAAM;IAAEC,KAAK;IAAEC,SAAS;IAAEC;EAAO,CAAC,GAAGJ,OAAO;EAE5C,oBACEH,OAAA;IAAKQ,SAAS,EAAC,QAAQ;IAAAC,QAAA,eACrBT,OAAA;MACEU,WAAW,EAAC,wBAAwB;MACpCC,KAAK,EAAEN,KAAK,CAACO,YAAa;MAC1BC,QAAQ,EAAEP,SAAU;MACpBQ,SAAS,EAAEP;IAAO;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACnB;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAAChB,EAAA,CArBID,KAAe;AAAAkB,EAAA,GAAflB,KAAe;AAuBrB,eAAeA,KAAK;AAAC,IAAAkB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}