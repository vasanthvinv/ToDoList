{"ast":null,"code":"// import React, { createContext, useReducer, useState } from \"react\";\n// import \"./App.css\";\n// import produce from \"immer\";\n// import _ from \"lodash\";\n\n// type Action =\n//   | { type: \"Set_Add\"; payload: string }\n//   | { type: \"Set_Change\"; payload: string }\n//   | { type: \"Set_Delete\"; payload: string }\n//   | { type: \"Set_Completed\" }\n//   | { type: \"Set_Filtered_Data\"; payload: Todo }\n//   | { type: \"Set_Active_Count\"};\n\n// interface Todo {\n//   data: string;\n//   completed: boolean;\n// }\n\n// interface State {\n//   todos: Todo[];\n//   currentValue: string;\n// }\n\n// const initialState: State = {\n//   todos: [],\n//   currentValue: \"\"\n// };\n\n// const reducer = produce((state: State, action: Action) => {\n//   switch (action.type) {\n//     case \"Set_Add\":\n//       state.todos = [\n//         ...state.todos,\n//         { data: action.payload, completed: false },\n//       ];\n//       state.currentValue = \"\"; \n//       break;\n\n//     case \"Set_Change\":\n//       state.todos = _.map(state.todos, (todo) =>\n//         todo.data === action.payload\n//           ? { ...todo, completed: !todo.completed }\n//           : todo\n//       );\n\n//       break;\n\n//     case \"Set_Delete\":\n//       state.todos = _.filter(\n//         state.todos,\n//         (todo) => todo.data !== action.payload\n//       );\n//       break;\n\n//     case \"Set_Completed\":\n//       state.todos = _.filter(state.todos, (todo) => !todo.completed);\n//       break;\n//   }\n// });\n\n// interface ContextProps  {\n//   state: State;\n//   dispatch: React.Dispatch<Action>;\n//   currentValue: string;\n//   SetChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\n//   SetAdd: (event: React.KeyboardEvent<HTMLInputElement>) => void;\n//   SetTodoChange: (item: Todo) => void;\n//   SetDelete: (item: Todo) => void;\n//   Set_Completed: () => void;\n// }\n\n// const ToDoListContext = createContext<ContextProps | undefined >(undefined);\n\n// const Main: ({ children }: {\n//   children: any;\n// }) => JSX.Element = ({ children }) => {\n//   const [state, dispatch] = useReducer(reducer, initialState);\n\n//   const SetChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n//     dispatch({ type: \"Set_Add\", payload: state.currentValue });\n\n//   };\n\n//   const SetAdd = (event: React.KeyboardEvent<HTMLInputElement>) => {\n//     if (event.key === \"Enter\") {\n//       dispatch({ type: \"Set_Add\", payload: state.currentValue });\n//     }\n//   };\n\n//   const SetTodoChange = (item: Todo) => {\n//     dispatch({ type: \"Set_Change\", payload: item.data });\n//   };\n\n//   const SetDelete = (item: Todo) => {\n//     dispatch({ type: \"Set_Delete\", payload: item.data });\n//   };\n\n//   const Set_Completed = () => {\n//     dispatch({ type: \"Set_Completed\" });\n//   };\n\n//   return (\n//     <div className=\"Main\">\n//       <h2>todos</h2>\n//       <ToDoListContext.Provider\n//         value={{\n//           state,\n//           dispatch,\n//           SetChange,\n//           SetAdd,\n//           SetTodoChange,\n//           SetDelete,\n//           Set_Completed,\n//         }}\n//       >\n//         {children}\n//       </ToDoListContext.Provider>\n//     </div>\n//   );\n// };\n\n// export  { Main, ToDoListContext };","map":{"version":3,"names":[],"sources":["/root/todolist/src/Main.tsx"],"sourcesContent":["// import React, { createContext, useReducer, useState } from \"react\";\r\n// import \"./App.css\";\r\n// import produce from \"immer\";\r\n// import _ from \"lodash\";\r\n\r\n// type Action =\r\n//   | { type: \"Set_Add\"; payload: string }\r\n//   | { type: \"Set_Change\"; payload: string }\r\n//   | { type: \"Set_Delete\"; payload: string }\r\n//   | { type: \"Set_Completed\" }\r\n//   | { type: \"Set_Filtered_Data\"; payload: Todo }\r\n//   | { type: \"Set_Active_Count\"};\r\n\r\n// interface Todo {\r\n//   data: string;\r\n//   completed: boolean;\r\n// }\r\n\r\n// interface State {\r\n//   todos: Todo[];\r\n//   currentValue: string;\r\n// }\r\n\r\n// const initialState: State = {\r\n//   todos: [],\r\n//   currentValue: \"\"\r\n// };\r\n\r\n// const reducer = produce((state: State, action: Action) => {\r\n//   switch (action.type) {\r\n//     case \"Set_Add\":\r\n//       state.todos = [\r\n//         ...state.todos,\r\n//         { data: action.payload, completed: false },\r\n//       ];\r\n//       state.currentValue = \"\"; \r\n//       break;\r\n\r\n//     case \"Set_Change\":\r\n//       state.todos = _.map(state.todos, (todo) =>\r\n//         todo.data === action.payload\r\n//           ? { ...todo, completed: !todo.completed }\r\n//           : todo\r\n//       );\r\n\r\n//       break;\r\n\r\n//     case \"Set_Delete\":\r\n//       state.todos = _.filter(\r\n//         state.todos,\r\n//         (todo) => todo.data !== action.payload\r\n//       );\r\n//       break;\r\n\r\n//     case \"Set_Completed\":\r\n//       state.todos = _.filter(state.todos, (todo) => !todo.completed);\r\n//       break;\r\n//   }\r\n// });\r\n\r\n// interface ContextProps  {\r\n//   state: State;\r\n//   dispatch: React.Dispatch<Action>;\r\n//   currentValue: string;\r\n//   SetChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\r\n//   SetAdd: (event: React.KeyboardEvent<HTMLInputElement>) => void;\r\n//   SetTodoChange: (item: Todo) => void;\r\n//   SetDelete: (item: Todo) => void;\r\n//   Set_Completed: () => void;\r\n// }\r\n\r\n// const ToDoListContext = createContext<ContextProps | undefined >(undefined);\r\n\r\n\r\n\r\n// const Main: ({ children }: {\r\n//   children: any;\r\n// }) => JSX.Element = ({ children }) => {\r\n//   const [state, dispatch] = useReducer(reducer, initialState);\r\n\r\n//   const SetChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n//     dispatch({ type: \"Set_Add\", payload: state.currentValue });\r\n\r\n//   };\r\n\r\n//   const SetAdd = (event: React.KeyboardEvent<HTMLInputElement>) => {\r\n//     if (event.key === \"Enter\") {\r\n//       dispatch({ type: \"Set_Add\", payload: state.currentValue });\r\n//     }\r\n//   };\r\n\r\n//   const SetTodoChange = (item: Todo) => {\r\n//     dispatch({ type: \"Set_Change\", payload: item.data });\r\n//   };\r\n\r\n//   const SetDelete = (item: Todo) => {\r\n//     dispatch({ type: \"Set_Delete\", payload: item.data });\r\n//   };\r\n\r\n//   const Set_Completed = () => {\r\n//     dispatch({ type: \"Set_Completed\" });\r\n//   };\r\n\r\n\r\n//   return (\r\n//     <div className=\"Main\">\r\n//       <h2>todos</h2>\r\n//       <ToDoListContext.Provider\r\n//         value={{\r\n//           state,\r\n//           dispatch,\r\n//           SetChange,\r\n//           SetAdd,\r\n//           SetTodoChange,\r\n//           SetDelete,\r\n//           Set_Completed,\r\n//         }}\r\n//       >\r\n//         {children}\r\n//       </ToDoListContext.Provider>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export  { Main, ToDoListContext };\r\n\r\n\r\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}