{"ast":null,"code":"var _jsxFileName = \"/root/todolist/src/list.tsx\";\n// import React, { useState } from \"react\";\n\n// interface InputProps {\n//     data: string[];\n//     setData: React.Dispatch<React.SetStateAction<string[]>>;\n//     currentValue: string;\n//     setCurrentValue: React.Dispatch<React.SetStateAction<string>>;\n//   }\n\n// const List: React.FC<InputProps>  = ({ data, setData, currentValue, setCurrentValue }) => {  return (\n//     <div>\n//       {data.map((item, i) => (\n//         <div>\n//           <input type=\"checkbox\" />\n//           <td key={i}>{item}</td>\n//         </div>\n//       ))}\n//     </div>\n//   );\n// }\n\n// export default List;\n\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst List = ({\n  data,\n  setData,\n  filter,\n  setFilter\n}) => {\n  const handleCheckboxChange = index => {\n    setData(prevData => prevData.map((item, i) => i === index ? {\n      ...item,\n      completed: !item.completed\n    } : item));\n  };\n  const filteredData = data.filter(item => {\n    if (filter === \"all\") return true;\n    if (filter === \"active\") return !item.completed;\n    if (filter === \"completed\") return item.completed;\n    return true;\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: filteredData.map((item, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"checkbox\",\n        checked: item.completed,\n        onChange: () => handleCheckboxChange(i)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: item.text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 11\n      }, this)]\n    }, i, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n};\n_c = List;\nexport default List;\nvar _c;\n$RefreshReg$(_c, \"List\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","List","data","setData","filter","setFilter","handleCheckboxChange","index","prevData","map","item","i","completed","filteredData","children","type","checked","onChange","fileName","_jsxFileName","lineNumber","columnNumber","text","_c","$RefreshReg$"],"sources":["/root/todolist/src/list.tsx"],"sourcesContent":["// import React, { useState } from \"react\";\r\n\r\n\r\n// interface InputProps {\r\n//     data: string[];\r\n//     setData: React.Dispatch<React.SetStateAction<string[]>>;\r\n//     currentValue: string;\r\n//     setCurrentValue: React.Dispatch<React.SetStateAction<string>>;\r\n//   }\r\n\r\n// const List: React.FC<InputProps>  = ({ data, setData, currentValue, setCurrentValue }) => {  return (\r\n//     <div>\r\n//       {data.map((item, i) => (\r\n//         <div>\r\n//           <input type=\"checkbox\" />\r\n//           <td key={i}>{item}</td>\r\n//         </div>\r\n//       ))}\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default List;\r\n\r\nimport React from \"react\";\r\n\r\ninterface InputProps {\r\n  data: { text: string; completed: boolean }[]; \r\n  setData: React.Dispatch<React.SetStateAction<{ text: string; completed: boolean }[]>>;\r\n  filter: \"all\" | \"active\" | \"completed\"; \r\n  setFilter: React.Dispatch<React.SetStateAction<\"all\" | \"active\" | \"completed\">>; // Add filter setter\r\n}\r\n\r\nconst List: React.FC<InputProps> = ({ data, setData, filter, setFilter }) => {\r\n  const handleCheckboxChange = (index: number) => {\r\n    setData(prevData =>\r\n      prevData.map((item, i) =>\r\n        i === index ? { ...item, completed: !item.completed } : item\r\n      )\r\n    );\r\n  };\r\n\r\n  const filteredData = data.filter(item => {\r\n    if (filter === \"all\") return true;\r\n    if (filter === \"active\") return !item.completed;\r\n    if (filter === \"completed\") return item.completed;\r\n    return true; \r\n  });\r\n\r\n  return (\r\n    <div>\r\n      {filteredData.map((item, i) => (\r\n        <div key={i}>\r\n          <input\r\n            type=\"checkbox\"\r\n            checked={item.completed}\r\n            onChange={() => handleCheckboxChange(i)}\r\n          />\r\n          <span>{item.text}</span>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default List;\r\n"],"mappings":";AAAA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAS1B,MAAMC,IAA0B,GAAGA,CAAC;EAAEC,IAAI;EAAEC,OAAO;EAAEC,MAAM;EAAEC;AAAU,CAAC,KAAK;EAC3E,MAAMC,oBAAoB,GAAIC,KAAa,IAAK;IAC9CJ,OAAO,CAACK,QAAQ,IACdA,QAAQ,CAACC,GAAG,CAAC,CAACC,IAAI,EAAEC,CAAC,KACnBA,CAAC,KAAKJ,KAAK,GAAG;MAAE,GAAGG,IAAI;MAAEE,SAAS,EAAE,CAACF,IAAI,CAACE;IAAU,CAAC,GAAGF,IAC1D,CACF,CAAC;EACH,CAAC;EAED,MAAMG,YAAY,GAAGX,IAAI,CAACE,MAAM,CAACM,IAAI,IAAI;IACvC,IAAIN,MAAM,KAAK,KAAK,EAAE,OAAO,IAAI;IACjC,IAAIA,MAAM,KAAK,QAAQ,EAAE,OAAO,CAACM,IAAI,CAACE,SAAS;IAC/C,IAAIR,MAAM,KAAK,WAAW,EAAE,OAAOM,IAAI,CAACE,SAAS;IACjD,OAAO,IAAI;EACb,CAAC,CAAC;EAEF,oBACEZ,OAAA;IAAAc,QAAA,EACGD,YAAY,CAACJ,GAAG,CAAC,CAACC,IAAI,EAAEC,CAAC,kBACxBX,OAAA;MAAAc,QAAA,gBACEd,OAAA;QACEe,IAAI,EAAC,UAAU;QACfC,OAAO,EAAEN,IAAI,CAACE,SAAU;QACxBK,QAAQ,EAAEA,CAAA,KAAMX,oBAAoB,CAACK,CAAC;MAAE;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACzC,CAAC,eACFrB,OAAA;QAAAc,QAAA,EAAOJ,IAAI,CAACY;MAAI;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC;IAAA,GANhBV,CAAC;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAON,CACN;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAACE,EAAA,GA9BItB,IAA0B;AAgChC,eAAeA,IAAI;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}