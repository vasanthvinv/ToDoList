{"ast":null,"code":"var _jsxFileName = \"/root/todolist/src/Main.tsx\",\n  _s = $RefreshSig$();\n// import React, { createContext, useReducer, useState } from \"react\";\n// import \"./App.css\";\n// import produce from \"immer\";\n// import _ from \"lodash\";\n\n// type Action =\n//   | { type: \"Set_Add\"; payload: string }\n//   | { type: \"Set_Change\"; payload: string }\n//   | { type: \"Set_Delete\"; payload: string }\n//   | { type: \"Set_Completed\" }\n//   | { type: \"Set_Filtered_Data\"; payload: Todo }\n//   | { type: \"Set_Active_Count\"};\n\n// interface Todo {\n//   data: string;\n//   completed: boolean;\n// }\n\n// interface State {\n//   todos: Todo[];\n//   currentValue: string;\n// }\n\n// const initialState: State = {\n//   todos: [],\n//   currentValue: \"\"\n// };\n\n// const reducer = produce((state: State, action: Action) => {\n//   switch (action.type) {\n//     case \"Set_Add\":\n//       state.todos = [\n//         ...state.todos,\n//         { data: action.payload, completed: false },\n//       ];\n//       state.currentValue = \"\"; \n//       break;\n\n//     case \"Set_Change\":\n//       state.todos = _.map(state.todos, (todo) =>\n//         todo.data === action.payload\n//           ? { ...todo, completed: !todo.completed }\n//           : todo\n//       );\n\n//       break;\n\n//     case \"Set_Delete\":\n//       state.todos = _.filter(\n//         state.todos,\n//         (todo) => todo.data !== action.payload\n//       );\n//       break;\n\n//     case \"Set_Completed\":\n//       state.todos = _.filter(state.todos, (todo) => !todo.completed);\n//       break;\n//   }\n// });\n\n// interface ContextProps  {\n//   state: State;\n//   dispatch: React.Dispatch<Action>;\n//   currentValue: string;\n//   SetChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\n//   SetAdd: (event: React.KeyboardEvent<HTMLInputElement>) => void;\n//   SetTodoChange: (item: Todo) => void;\n//   SetDelete: (item: Todo) => void;\n//   Set_Completed: () => void;\n// }\n\n// const ToDoListContext = createContext<ContextProps | undefined >(undefined);\n\n// const Main: ({ children }: {\n//   children: any;\n// }) => JSX.Element = ({ children }) => {\n//   const [state, dispatch] = useReducer(reducer, initialState);\n\n//   const SetChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n//     dispatch({ type: \"Set_Add\", payload: state.currentValue });\n\n//   };\n\n//   const SetAdd = (event: React.KeyboardEvent<HTMLInputElement>) => {\n//     if (event.key === \"Enter\") {\n//       dispatch({ type: \"Set_Add\", payload: state.currentValue });\n//     }\n//   };\n\n//   const SetTodoChange = (item: Todo) => {\n//     dispatch({ type: \"Set_Change\", payload: item.data });\n//   };\n\n//   const SetDelete = (item: Todo) => {\n//     dispatch({ type: \"Set_Delete\", payload: item.data });\n//   };\n\n//   const Set_Completed = () => {\n//     dispatch({ type: \"Set_Completed\" });\n//   };\n\n//   return (\n//     <div className=\"Main\">\n//       <h2>todos</h2>\n//       <ToDoListContext.Provider\n//         value={{\n//           state,\n//           dispatch,\n//           SetChange,\n//           SetAdd,\n//           SetTodoChange,\n//           SetDelete,\n//           Set_Completed,\n//         }}\n//       >\n//         {children}\n//       </ToDoListContext.Provider>\n//     </div>\n//   );\n// };\n\n// export  { Main, ToDoListContext };\n\nimport React, { createContext, useReducer } from \"react\";\nimport produce from \"immer\";\n\n// Define action types\n\n// Define Todo interface\n\n// Define state interface\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Initial state\nconst initialState = {\n  todos: [],\n  currentValue: \"\"\n};\n\n// Reducer function with immer for state management\nconst reducer = produce((state, action) => {\n  switch (action.type) {\n    case \"Set_Add\":\n      state.todos.push({\n        data: action.payload,\n        completed: false\n      });\n      state.currentValue = \"\"; // Clear the input value\n      break;\n    case \"Set_Change\":\n      const todo = state.todos.find(todo => todo.data === action.payload);\n      if (todo) {\n        todo.completed = !todo.completed;\n      }\n      break;\n    case \"Set_Delete\":\n      state.todos = state.todos.filter(todo => todo.data !== action.payload);\n      break;\n    case \"Set_Completed\":\n      state.todos = state.todos.filter(todo => !todo.completed);\n      break;\n    default:\n      break;\n  }\n});\n\n// Context props including dispatch for actions\n\n// Create context\nconst ToDoListContext = /*#__PURE__*/createContext(undefined);\n\n// Main component\nconst Main = ({\n  children\n}) => {\n  _s();\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  // Event handlers\n  const SetChange = event => {\n    dispatch({\n      type: \"Set_Change\",\n      payload: event.target.value\n    });\n  };\n  const SetAdd = event => {\n    if (event.key === \"Enter\") {\n      dispatch({\n        type: \"Set_Add\",\n        payload: state.currentValue\n      });\n    }\n  };\n  const SetTodoChange = item => {\n    dispatch({\n      type: \"Set_Change\",\n      payload: item.data\n    });\n  };\n  const SetDelete = item => {\n    dispatch({\n      type: \"Set_Delete\",\n      payload: item.data\n    });\n  };\n  const Set_Completed = () => {\n    dispatch({\n      type: \"Set_Completed\"\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Main\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"todos\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ToDoListContext.Provider, {\n      value: {\n        state,\n        dispatch,\n        SetChange,\n        SetAdd,\n        SetTodoChange,\n        SetDelete,\n        Set_Completed\n      },\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 227,\n    columnNumber: 5\n  }, this);\n};\n_s(Main, \"6JWkGZ32UPfojeNx+xqn8ZU8A0Q=\");\n_c = Main;\nexport { Main, ToDoListContext };\nvar _c;\n$RefreshReg$(_c, \"Main\");","map":{"version":3,"names":["React","createContext","useReducer","produce","jsxDEV","_jsxDEV","initialState","todos","currentValue","reducer","state","action","type","push","data","payload","completed","todo","find","filter","ToDoListContext","undefined","Main","children","_s","dispatch","SetChange","event","target","value","SetAdd","key","SetTodoChange","item","SetDelete","Set_Completed","className","fileName","_jsxFileName","lineNumber","columnNumber","Provider","_c","$RefreshReg$"],"sources":["/root/todolist/src/Main.tsx"],"sourcesContent":["// import React, { createContext, useReducer, useState } from \"react\";\r\n// import \"./App.css\";\r\n// import produce from \"immer\";\r\n// import _ from \"lodash\";\r\n\r\n// type Action =\r\n//   | { type: \"Set_Add\"; payload: string }\r\n//   | { type: \"Set_Change\"; payload: string }\r\n//   | { type: \"Set_Delete\"; payload: string }\r\n//   | { type: \"Set_Completed\" }\r\n//   | { type: \"Set_Filtered_Data\"; payload: Todo }\r\n//   | { type: \"Set_Active_Count\"};\r\n\r\n// interface Todo {\r\n//   data: string;\r\n//   completed: boolean;\r\n// }\r\n\r\n// interface State {\r\n//   todos: Todo[];\r\n//   currentValue: string;\r\n// }\r\n\r\n// const initialState: State = {\r\n//   todos: [],\r\n//   currentValue: \"\"\r\n// };\r\n\r\n// const reducer = produce((state: State, action: Action) => {\r\n//   switch (action.type) {\r\n//     case \"Set_Add\":\r\n//       state.todos = [\r\n//         ...state.todos,\r\n//         { data: action.payload, completed: false },\r\n//       ];\r\n//       state.currentValue = \"\"; \r\n//       break;\r\n\r\n//     case \"Set_Change\":\r\n//       state.todos = _.map(state.todos, (todo) =>\r\n//         todo.data === action.payload\r\n//           ? { ...todo, completed: !todo.completed }\r\n//           : todo\r\n//       );\r\n\r\n//       break;\r\n\r\n//     case \"Set_Delete\":\r\n//       state.todos = _.filter(\r\n//         state.todos,\r\n//         (todo) => todo.data !== action.payload\r\n//       );\r\n//       break;\r\n\r\n//     case \"Set_Completed\":\r\n//       state.todos = _.filter(state.todos, (todo) => !todo.completed);\r\n//       break;\r\n//   }\r\n// });\r\n\r\n// interface ContextProps  {\r\n//   state: State;\r\n//   dispatch: React.Dispatch<Action>;\r\n//   currentValue: string;\r\n//   SetChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\r\n//   SetAdd: (event: React.KeyboardEvent<HTMLInputElement>) => void;\r\n//   SetTodoChange: (item: Todo) => void;\r\n//   SetDelete: (item: Todo) => void;\r\n//   Set_Completed: () => void;\r\n// }\r\n\r\n// const ToDoListContext = createContext<ContextProps | undefined >(undefined);\r\n\r\n\r\n\r\n// const Main: ({ children }: {\r\n//   children: any;\r\n// }) => JSX.Element = ({ children }) => {\r\n//   const [state, dispatch] = useReducer(reducer, initialState);\r\n\r\n//   const SetChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n//     dispatch({ type: \"Set_Add\", payload: state.currentValue });\r\n\r\n//   };\r\n\r\n//   const SetAdd = (event: React.KeyboardEvent<HTMLInputElement>) => {\r\n//     if (event.key === \"Enter\") {\r\n//       dispatch({ type: \"Set_Add\", payload: state.currentValue });\r\n//     }\r\n//   };\r\n\r\n//   const SetTodoChange = (item: Todo) => {\r\n//     dispatch({ type: \"Set_Change\", payload: item.data });\r\n//   };\r\n\r\n//   const SetDelete = (item: Todo) => {\r\n//     dispatch({ type: \"Set_Delete\", payload: item.data });\r\n//   };\r\n\r\n//   const Set_Completed = () => {\r\n//     dispatch({ type: \"Set_Completed\" });\r\n//   };\r\n\r\n\r\n//   return (\r\n//     <div className=\"Main\">\r\n//       <h2>todos</h2>\r\n//       <ToDoListContext.Provider\r\n//         value={{\r\n//           state,\r\n//           dispatch,\r\n//           SetChange,\r\n//           SetAdd,\r\n//           SetTodoChange,\r\n//           SetDelete,\r\n//           Set_Completed,\r\n//         }}\r\n//       >\r\n//         {children}\r\n//       </ToDoListContext.Provider>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export  { Main, ToDoListContext };\r\n\r\n\r\nimport React, { createContext, useReducer, ReactNode } from \"react\";\r\nimport produce from \"immer\";\r\nimport _ from \"lodash\";\r\n\r\n// Define action types\r\ntype Action =\r\n  | { type: \"Set_Add\"; payload: string }\r\n  | { type: \"Set_Change\"; payload: string }\r\n  | { type: \"Set_Delete\"; payload: string }\r\n  | { type: \"Set_Completed\" };\r\n\r\n// Define Todo interface\r\ninterface Todo {\r\n  data: string;\r\n  completed: boolean;\r\n}\r\n\r\n// Define state interface\r\ninterface State {\r\n  todos: Todo[];\r\n  currentValue: string;\r\n}\r\n\r\n// Initial state\r\nconst initialState: State = {\r\n  todos: [],\r\n  currentValue: \"\"\r\n};\r\n\r\n// Reducer function with immer for state management\r\nconst reducer = produce((state: State, action: Action) => {\r\n  switch (action.type) {\r\n    case \"Set_Add\":\r\n      state.todos.push({ data: action.payload, completed: false });\r\n      state.currentValue = \"\"; // Clear the input value\r\n      break;\r\n\r\n    case \"Set_Change\":\r\n      const todo = state.todos.find(todo => todo.data === action.payload);\r\n      if (todo) {\r\n        todo.completed = !todo.completed;\r\n      }\r\n      break;\r\n\r\n    case \"Set_Delete\":\r\n      state.todos = state.todos.filter(todo => todo.data !== action.payload);\r\n      break;\r\n\r\n    case \"Set_Completed\":\r\n      state.todos = state.todos.filter(todo => !todo.completed);\r\n      break;\r\n\r\n    default:\r\n      break;\r\n  }\r\n});\r\n\r\n// Context props including dispatch for actions\r\ninterface ContextProps {\r\n  state: State;\r\n  dispatch: React.Dispatch<Action>;\r\n  SetChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\r\n  SetAdd: (event: React.KeyboardEvent<HTMLInputElement>) => void;\r\n  SetTodoChange: (item: Todo) => void;\r\n  SetDelete: (item: Todo) => void;\r\n  Set_Completed: () => void;\r\n}\r\n\r\n// Create context\r\nconst ToDoListContext = createContext<ContextProps | undefined>(undefined);\r\n\r\n// Main component\r\nconst Main: React.FC<{ children: ReactNode }> = ({ children }) => {\r\n  const [state, dispatch] = useReducer(reducer, initialState);\r\n\r\n  // Event handlers\r\n  const SetChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    dispatch({ type: \"Set_Change\", payload: event.target.value });\r\n  };\r\n\r\n  const SetAdd = (event: React.KeyboardEvent<HTMLInputElement>) => {\r\n    if (event.key === \"Enter\") {\r\n      dispatch({ type: \"Set_Add\", payload: state.currentValue });\r\n    }\r\n  };\r\n\r\n  const SetTodoChange = (item: Todo) => {\r\n    dispatch({ type: \"Set_Change\", payload: item.data });\r\n  };\r\n\r\n  const SetDelete = (item: Todo) => {\r\n    dispatch({ type: \"Set_Delete\", payload: item.data });\r\n  };\r\n\r\n  const Set_Completed = () => {\r\n    dispatch({ type: \"Set_Completed\" });\r\n  };\r\n\r\n  return (\r\n    <div className=\"Main\">\r\n      <h2>todos</h2>\r\n      <ToDoListContext.Provider\r\n        value={{\r\n          state,\r\n          dispatch,\r\n          SetChange,\r\n          SetAdd,\r\n          SetTodoChange,\r\n          SetDelete,\r\n          Set_Completed,\r\n        }}\r\n      >\r\n        {children}\r\n      </ToDoListContext.Provider>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport { Main, ToDoListContext };\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,QAAmB,OAAO;AACnE,OAAOC,OAAO,MAAM,OAAO;;AAG3B;;AAOA;;AAMA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAMA;AACA,MAAMC,YAAmB,GAAG;EAC1BC,KAAK,EAAE,EAAE;EACTC,YAAY,EAAE;AAChB,CAAC;;AAED;AACA,MAAMC,OAAO,GAAGN,OAAO,CAAC,CAACO,KAAY,EAAEC,MAAc,KAAK;EACxD,QAAQA,MAAM,CAACC,IAAI;IACjB,KAAK,SAAS;MACZF,KAAK,CAACH,KAAK,CAACM,IAAI,CAAC;QAAEC,IAAI,EAAEH,MAAM,CAACI,OAAO;QAAEC,SAAS,EAAE;MAAM,CAAC,CAAC;MAC5DN,KAAK,CAACF,YAAY,GAAG,EAAE,CAAC,CAAC;MACzB;IAEF,KAAK,YAAY;MACf,MAAMS,IAAI,GAAGP,KAAK,CAACH,KAAK,CAACW,IAAI,CAACD,IAAI,IAAIA,IAAI,CAACH,IAAI,KAAKH,MAAM,CAACI,OAAO,CAAC;MACnE,IAAIE,IAAI,EAAE;QACRA,IAAI,CAACD,SAAS,GAAG,CAACC,IAAI,CAACD,SAAS;MAClC;MACA;IAEF,KAAK,YAAY;MACfN,KAAK,CAACH,KAAK,GAAGG,KAAK,CAACH,KAAK,CAACY,MAAM,CAACF,IAAI,IAAIA,IAAI,CAACH,IAAI,KAAKH,MAAM,CAACI,OAAO,CAAC;MACtE;IAEF,KAAK,eAAe;MAClBL,KAAK,CAACH,KAAK,GAAGG,KAAK,CAACH,KAAK,CAACY,MAAM,CAACF,IAAI,IAAI,CAACA,IAAI,CAACD,SAAS,CAAC;MACzD;IAEF;MACE;EACJ;AACF,CAAC,CAAC;;AAEF;;AAWA;AACA,MAAMI,eAAe,gBAAGnB,aAAa,CAA2BoB,SAAS,CAAC;;AAE1E;AACA,MAAMC,IAAuC,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAChE,MAAM,CAACd,KAAK,EAAEe,QAAQ,CAAC,GAAGvB,UAAU,CAACO,OAAO,EAAEH,YAAY,CAAC;;EAE3D;EACA,MAAMoB,SAAS,GAAIC,KAA0C,IAAK;IAChEF,QAAQ,CAAC;MAAEb,IAAI,EAAE,YAAY;MAAEG,OAAO,EAAEY,KAAK,CAACC,MAAM,CAACC;IAAM,CAAC,CAAC;EAC/D,CAAC;EAED,MAAMC,MAAM,GAAIH,KAA4C,IAAK;IAC/D,IAAIA,KAAK,CAACI,GAAG,KAAK,OAAO,EAAE;MACzBN,QAAQ,CAAC;QAAEb,IAAI,EAAE,SAAS;QAAEG,OAAO,EAAEL,KAAK,CAACF;MAAa,CAAC,CAAC;IAC5D;EACF,CAAC;EAED,MAAMwB,aAAa,GAAIC,IAAU,IAAK;IACpCR,QAAQ,CAAC;MAAEb,IAAI,EAAE,YAAY;MAAEG,OAAO,EAAEkB,IAAI,CAACnB;IAAK,CAAC,CAAC;EACtD,CAAC;EAED,MAAMoB,SAAS,GAAID,IAAU,IAAK;IAChCR,QAAQ,CAAC;MAAEb,IAAI,EAAE,YAAY;MAAEG,OAAO,EAAEkB,IAAI,CAACnB;IAAK,CAAC,CAAC;EACtD,CAAC;EAED,MAAMqB,aAAa,GAAGA,CAAA,KAAM;IAC1BV,QAAQ,CAAC;MAAEb,IAAI,EAAE;IAAgB,CAAC,CAAC;EACrC,CAAC;EAED,oBACEP,OAAA;IAAK+B,SAAS,EAAC,MAAM;IAAAb,QAAA,gBACnBlB,OAAA;MAAAkB,QAAA,EAAI;IAAK;MAAAc,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACdnC,OAAA,CAACe,eAAe,CAACqB,QAAQ;MACvBZ,KAAK,EAAE;QACLnB,KAAK;QACLe,QAAQ;QACRC,SAAS;QACTI,MAAM;QACNE,aAAa;QACbE,SAAS;QACTC;MACF,CAAE;MAAAZ,QAAA,EAEDA;IAAQ;MAAAc,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACe,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACxB,CAAC;AAEV,CAAC;AAAChB,EAAA,CA5CIF,IAAuC;AAAAoB,EAAA,GAAvCpB,IAAuC;AA8C7C,SAASA,IAAI,EAAEF,eAAe;AAAG,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}