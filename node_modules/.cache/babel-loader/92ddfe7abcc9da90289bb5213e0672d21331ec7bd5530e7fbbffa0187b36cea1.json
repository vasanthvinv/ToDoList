{"ast":null,"code":"var _jsxFileName = \"/root/todolist/src/details.tsx\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst List = ({\n  data,\n  setData,\n  filter,\n  setFilter\n}) => {\n  const handleCheckboxChange = index => {\n    setData(prevData => prevData.map((item, i) => i === index ? {\n      ...item,\n      completed: !item.completed\n    } : item));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: filteredData.map((item, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"checkbox\",\n        checked: item.completed,\n        onChange: () => handleCheckboxChange(i)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: item.text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 11\n      }, this)]\n    }, i, true, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 4\n  }, this);\n};\n_c = List;\nexport default Details;\nvar _c;\n$RefreshReg$(_c, \"List\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","List","data","setData","filter","setFilter","handleCheckboxChange","index","prevData","map","item","i","completed","children","filteredData","type","checked","onChange","fileName","_jsxFileName","lineNumber","columnNumber","text","_c","Details","$RefreshReg$"],"sources":["/root/todolist/src/details.tsx"],"sourcesContent":["import React from \"react\";\r\n\r\ninterface InputProps {\r\n    data: { text: string; completed: boolean }[]; // Update the data structure\r\n    setData: React.Dispatch<React.SetStateAction<{ text: string; completed: boolean }[]>>;\r\n    filter: \"all\" | \"active\" | \"completed\"; // Add filter state\r\n    setFilter: React.Dispatch<React.SetStateAction<\"all\" | \"active\" | \"completed\">>; // Add filter setter\r\n  }\r\n\r\nconst List: React.FC<InputProps> = ({ data, setData, filter, setFilter }) => {\r\n    const handleCheckboxChange = (index: number) => {\r\n        setData(prevData =>\r\n          prevData.map((item, i) =>\r\n            i === index ? { ...item, completed: !item.completed } : item\r\n          )\r\n        );\r\n      };\r\n\r\n  return (\r\n   <div>\r\n      {filteredData.map((item, i) => (\r\n        <div key={i}>\r\n          <input\r\n            type=\"checkbox\"\r\n            checked={item.completed}\r\n            onChange={() => handleCheckboxChange(i)}\r\n          />\r\n          <span>{item.text}</span>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Details;\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAS1B,MAAMC,IAA0B,GAAGA,CAAC;EAAEC,IAAI;EAAEC,OAAO;EAAEC,MAAM;EAAEC;AAAU,CAAC,KAAK;EACzE,MAAMC,oBAAoB,GAAIC,KAAa,IAAK;IAC5CJ,OAAO,CAACK,QAAQ,IACdA,QAAQ,CAACC,GAAG,CAAC,CAACC,IAAI,EAAEC,CAAC,KACnBA,CAAC,KAAKJ,KAAK,GAAG;MAAE,GAAGG,IAAI;MAAEE,SAAS,EAAE,CAACF,IAAI,CAACE;IAAU,CAAC,GAAGF,IAC1D,CACF,CAAC;EACH,CAAC;EAEL,oBACCV,OAAA;IAAAa,QAAA,EACIC,YAAY,CAACL,GAAG,CAAC,CAACC,IAAI,EAAEC,CAAC,kBACxBX,OAAA;MAAAa,QAAA,gBACEb,OAAA;QACEe,IAAI,EAAC,UAAU;QACfC,OAAO,EAAEN,IAAI,CAACE,SAAU;QACxBK,QAAQ,EAAEA,CAAA,KAAMX,oBAAoB,CAACK,CAAC;MAAE;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACzC,CAAC,eACFrB,OAAA;QAAAa,QAAA,EAAOH,IAAI,CAACY;MAAI;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC;IAAA,GANhBV,CAAC;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAON,CACN;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAAAE,EAAA,GAvBKtB,IAA0B;AAyBhC,eAAeuB,OAAO;AAAC,IAAAD,EAAA;AAAAE,YAAA,CAAAF,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}