{"ast":null,"code":"var _jsxFileName = \"/root/todolist/src/Main.tsx\",\n  _s = $RefreshSig$();\nimport React, { createContext, useReducer } from \"react\";\nimport produce from \"immer\";\n\n// Define action types\n\n// Define Todo interface\n\n// Define state interface\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Initial state\nconst initialState = {\n  todos: [],\n  currentValue: \"\"\n};\n\n// Reducer function with immer for state management\nconst reducer = produce((state, action) => {\n  switch (action.type) {\n    case \"Set_Add\":\n      state.todos.push({\n        data: action.payload,\n        completed: false\n      });\n      state.currentValue = \"\"; // Clear the input value\n      break;\n    case \"Set_Change\":\n      const todo = state.todos.find(todo => todo.data === action.payload);\n      if (todo) {\n        todo.completed = !todo.completed;\n      }\n      break;\n    case \"Set_Delete\":\n      state.todos = state.todos.filter(todo => todo.data !== action.payload);\n      break;\n    case \"Set_Completed\":\n      state.todos = state.todos.filter(todo => !todo.completed);\n      break;\n    default:\n      break;\n  }\n});\n\n// Context props including dispatch for actions\n\n// Create context\nconst ToDoListContext = /*#__PURE__*/createContext(undefined);\n\n// Main component\nconst Main = ({\n  children\n}) => {\n  _s();\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  // Event handlers\n  const SetChange = event => {\n    dispatch({\n      type: \"Set_Change\",\n      payload: event.target.value\n    });\n  };\n  const SetAdd = event => {\n    if (event.key === \"Enter\") {\n      dispatch({\n        type: \"Set_Add\",\n        payload: state.currentValue\n      });\n    }\n  };\n  const SetTodoChange = item => {\n    dispatch({\n      type: \"Set_Change\",\n      payload: item.data\n    });\n  };\n  const SetDelete = item => {\n    dispatch({\n      type: \"Set_Delete\",\n      payload: item.data\n    });\n  };\n  const Set_Completed = () => {\n    dispatch({\n      type: \"Set_Completed\"\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(ToDoListContext.Provider, {\n    value: {\n      state,\n      dispatch,\n      SetChange,\n      SetAdd,\n      SetTodoChange,\n      SetDelete,\n      Set_Completed\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 5\n  }, this);\n};\n_s(Main, \"6JWkGZ32UPfojeNx+xqn8ZU8A0Q=\");\n_c = Main;\nexport { Main, ToDoListContext };\nvar _c;\n$RefreshReg$(_c, \"Main\");","map":{"version":3,"names":["React","createContext","useReducer","produce","jsxDEV","_jsxDEV","initialState","todos","currentValue","reducer","state","action","type","push","data","payload","completed","todo","find","filter","ToDoListContext","undefined","Main","children","_s","dispatch","SetChange","event","target","value","SetAdd","key","SetTodoChange","item","SetDelete","Set_Completed","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/root/todolist/src/Main.tsx"],"sourcesContent":["import React, { createContext, useReducer, ReactNode } from \"react\";\r\nimport produce from \"immer\";\r\n\r\n// Define action types\r\ntype Action =\r\n  | { type: \"Set_Add\"; payload: string }\r\n  | { type: \"Set_Change\"; payload: string }\r\n  | { type: \"Set_Delete\"; payload: string }\r\n  | { type: \"Set_Completed\" };\r\n\r\n// Define Todo interface\r\ninterface Todo {\r\n  data: string;\r\n  completed: boolean;\r\n}\r\n\r\n// Define state interface\r\ninterface State {\r\n  todos: Todo[];\r\n  currentValue: string;\r\n}\r\n\r\n// Initial state\r\nconst initialState: State = {\r\n  todos: [],\r\n  currentValue: \"\"\r\n};\r\n\r\n// Reducer function with immer for state management\r\nconst reducer = produce((state: State, action: Action) => {\r\n  switch (action.type) {\r\n    case \"Set_Add\":\r\n      state.todos.push({ data: action.payload, completed: false });\r\n      state.currentValue = \"\"; // Clear the input value\r\n      break;\r\n\r\n    case \"Set_Change\":\r\n      const todo = state.todos.find(todo => todo.data === action.payload);\r\n      if (todo) {\r\n        todo.completed = !todo.completed;\r\n      }\r\n      break;\r\n\r\n    case \"Set_Delete\":\r\n      state.todos = state.todos.filter(todo => todo.data !== action.payload);\r\n      break;\r\n\r\n    case \"Set_Completed\":\r\n      state.todos = state.todos.filter(todo => !todo.completed);\r\n      break;\r\n\r\n    default:\r\n      break;\r\n  }\r\n});\r\n\r\n// Context props including dispatch for actions\r\ninterface ContextProps {\r\n  state: State;\r\n  dispatch: React.Dispatch<Action>;\r\n  SetChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\r\n  SetAdd: (event: React.KeyboardEvent<HTMLInputElement>) => void;\r\n  SetTodoChange: (item: Todo) => void;\r\n  SetDelete: (item: Todo) => void;\r\n  Set_Completed: () => void;\r\n}\r\n\r\n// Create context\r\nconst ToDoListContext = createContext<ContextProps | undefined>(undefined);\r\n\r\n// Main component\r\nconst Main: React.FC<{ children: ReactNode }> = ({ children }) => {\r\n  const [state, dispatch] = useReducer(reducer, initialState);\r\n\r\n  // Event handlers\r\n  const SetChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    dispatch({ type: \"Set_Change\", payload: event.target.value });\r\n  };\r\n\r\n  const SetAdd = (event: React.KeyboardEvent<HTMLInputElement>) => {\r\n    if (event.key === \"Enter\") {\r\n      dispatch({ type: \"Set_Add\", payload: state.currentValue });\r\n    }\r\n  };\r\n\r\n  const SetTodoChange = (item: Todo) => {\r\n    dispatch({ type: \"Set_Change\", payload: item.data });\r\n  };\r\n\r\n  const SetDelete = (item: Todo) => {\r\n    dispatch({ type: \"Set_Delete\", payload: item.data });\r\n  };\r\n\r\n  const Set_Completed = () => {\r\n    dispatch({ type: \"Set_Completed\" });\r\n  };\r\n\r\n  return (\r\n    <ToDoListContext.Provider\r\n      value={{\r\n        state,\r\n        dispatch,\r\n        SetChange,\r\n        SetAdd,\r\n        SetTodoChange,\r\n        SetDelete,\r\n        Set_Completed,\r\n      }}\r\n    >\r\n      {children}\r\n    </ToDoListContext.Provider>\r\n  );\r\n};\r\n\r\nexport { Main, ToDoListContext };\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}