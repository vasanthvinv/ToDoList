{"ast":null,"code":"// import React, { useReducer, useState } from \"react\";\n// import \"./App.css\";\n\n// interface State {\n//     data:[];\n//     currentValue: string,\n//     all: boolean;\n//     active:boolean,\n//     completed: boolean,\n//     datas: []\n\n// }\n// type Action = \n// |{type:'Change_to_All'; payload: boolean }\n// |{type:'Change_to_Active'; payload: boolean }\n// |{type:'Change_to_Completed'; payload: boolean }\n// |{type:'Change_to_HandleChange';payload: string}\n\n// const initialState = {\n//     data: [],\n//     currentValue: '',\n//     all: true,\n//     active:false,\n//     completed: false,\n//     datas: []\n\n// }\n\n// const reducer = (state: State,action:Action):State => {\n//     switch(action.type){\n//         case 'Change_to_All':\n//             return {\n//                 ...state ,\n//                 all: action.payload ,\n//                 active: !action.payload ,\n//                 completed: !action.payload\n//             }\n//         case 'Change_to_Active':\n//                 return {  \n//                     ...state ,\n//                     active: action.payload ,\n//                     all: !action.payload ,\n//                     completed: !action.payload\n//             }\n//          case 'Change_to_Completed':\n//                 return {  \n//                     ...state ,\n//                     completed: action.payload ,\n//                     all: !action.payload ,\n//                     active: !action.payload\n//             }\n//         case \"Change_to_HandleChange\":\n//             return{\n//                 ...state ,\n//                 datas: state.datas.includes(action.payload ) ? state.datas.filter((i) => i !== action.payload) : [...state.datas, action.payload]\n//             }\n\n//         }\n//     }\n\n// const Todolist: React.FC = () => {\n\n//     const [state , dispatch] = useReducer(reducer , initialState)\n//   const [data, setData] = useState<string[]>([]);\n//   const [currentValue, setCurrentValue] = useState(\"\");\n//   const [all, setAll] = useState(true);\n//   const [active, setActive] = useState(false);\n//   const [completed, setCompleted] = useState(false);\n//   const [datas, setDatas] = useState<string[]>([]);\n\n//   const handleAll = () => {\n//     dispatch({type: 'Change_to_All' , payload: true})\n//   };\n\n//   const handleActive = () => {\n//     dispatch({type: 'Change_to_Active' , payload: true})\n//   };\n\n//   const handleCompleted = () => {\n//     dispatch({type: 'Change_to_Completed' , payload: true})\n//   };\n\n//   const handleChange = (item: string) => {\n//     dispatch({type:'Change_to_HandleChange', payload: item})\n\n//   };\n\n//   const handleAdd = (event: React.KeyboardEvent<HTMLInputElement>) => {\n//     if (event.key === \"Enter\" && currentValue.trim()) {\n//       setData([...data, currentValue.trim()]);\n//       setCurrentValue(\"\");\n//     }\n//   };\n\n//   const filteredData = data.filter((item) => {\n//     if (all) return true;\n//     if (active) return !datas.includes(item);\n//     if (completed) return datas.includes(item);\n//     return false;\n//   });\n\n//   return (\n//     <div className=\"Todolist\">\n//       <h2>todos</h2>\n//       <div className=\"inputs\">\n//         <input\n//           placeholder=\"What needs to be done?\"\n//           value={currentValue}\n//           onChange={(e) => setCurrentValue(e.target.value)}\n//           onKeyDown={handleAdd}\n//         />\n//       </div>\n//       <div>\n//         {filteredData.map((item, i) => (\n//           <div key={i}>\n//             <input\n//               type=\"checkbox\"\n//               checked={datas.includes(item)}\n//               onChange={() => handleChange(item)}\n//             />\n//             <span>{item}</span>\n//             <button\n//               onClick={() => setDatas((prev) => prev.filter((i) => i !== item))}\n//             >\n//               X\n//             </button>\n//           </div>\n//         ))}\n//       </div>\n//       <div>\n//         <span>{data.length - datas.length} item left!</span>\n//         <span>\n//           <button onClick={handleAll}>All</button>\n//           <button onClick={handleActive}>Active</button>\n//           <button onClick={handleCompleted}>Completed</button>\n//         </span>\n//         <button>Clear completed</button>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Todolist;","map":{"version":3,"names":[],"sources":["/root/todolist/src/todolist.tsx"],"sourcesContent":["// import React, { useReducer, useState } from \"react\";\r\n// import \"./App.css\";\r\n\r\n// interface State {\r\n//     data:[];\r\n//     currentValue: string,\r\n//     all: boolean;\r\n//     active:boolean,\r\n//     completed: boolean,\r\n//     datas: []\r\n\r\n// }\r\n// type Action = \r\n// |{type:'Change_to_All'; payload: boolean }\r\n// |{type:'Change_to_Active'; payload: boolean }\r\n// |{type:'Change_to_Completed'; payload: boolean }\r\n// |{type:'Change_to_HandleChange';payload: string}\r\n\r\n// const initialState = {\r\n//     data: [],\r\n//     currentValue: '',\r\n//     all: true,\r\n//     active:false,\r\n//     completed: false,\r\n//     datas: []\r\n\r\n// }\r\n\r\n// const reducer = (state: State,action:Action):State => {\r\n//     switch(action.type){\r\n//         case 'Change_to_All':\r\n//             return {\r\n//                 ...state ,\r\n//                 all: action.payload ,\r\n//                 active: !action.payload ,\r\n//                 completed: !action.payload\r\n//             }\r\n//         case 'Change_to_Active':\r\n//                 return {  \r\n//                     ...state ,\r\n//                     active: action.payload ,\r\n//                     all: !action.payload ,\r\n//                     completed: !action.payload\r\n//             }\r\n//          case 'Change_to_Completed':\r\n//                 return {  \r\n//                     ...state ,\r\n//                     completed: action.payload ,\r\n//                     all: !action.payload ,\r\n//                     active: !action.payload\r\n//             }\r\n//         case \"Change_to_HandleChange\":\r\n//             return{\r\n//                 ...state ,\r\n//                 datas: state.datas.includes(action.payload ) ? state.datas.filter((i) => i !== action.payload) : [...state.datas, action.payload]\r\n//             }\r\n\r\n//         }\r\n//     }\r\n\r\n\r\n\r\n// const Todolist: React.FC = () => {\r\n\r\n//     const [state , dispatch] = useReducer(reducer , initialState)\r\n//   const [data, setData] = useState<string[]>([]);\r\n//   const [currentValue, setCurrentValue] = useState(\"\");\r\n//   const [all, setAll] = useState(true);\r\n//   const [active, setActive] = useState(false);\r\n//   const [completed, setCompleted] = useState(false);\r\n//   const [datas, setDatas] = useState<string[]>([]);\r\n\r\n//   const handleAll = () => {\r\n//     dispatch({type: 'Change_to_All' , payload: true})\r\n//   };\r\n\r\n//   const handleActive = () => {\r\n//     dispatch({type: 'Change_to_Active' , payload: true})\r\n//   };\r\n\r\n//   const handleCompleted = () => {\r\n//     dispatch({type: 'Change_to_Completed' , payload: true})\r\n//   };\r\n\r\n//   const handleChange = (item: string) => {\r\n//     dispatch({type:'Change_to_HandleChange', payload: item})\r\n    \r\n//   };\r\n\r\n//   const handleAdd = (event: React.KeyboardEvent<HTMLInputElement>) => {\r\n//     if (event.key === \"Enter\" && currentValue.trim()) {\r\n//       setData([...data, currentValue.trim()]);\r\n//       setCurrentValue(\"\");\r\n//     }\r\n//   };\r\n\r\n//   const filteredData = data.filter((item) => {\r\n//     if (all) return true;\r\n//     if (active) return !datas.includes(item);\r\n//     if (completed) return datas.includes(item);\r\n//     return false;\r\n//   });\r\n\r\n//   return (\r\n//     <div className=\"Todolist\">\r\n//       <h2>todos</h2>\r\n//       <div className=\"inputs\">\r\n//         <input\r\n//           placeholder=\"What needs to be done?\"\r\n//           value={currentValue}\r\n//           onChange={(e) => setCurrentValue(e.target.value)}\r\n//           onKeyDown={handleAdd}\r\n//         />\r\n//       </div>\r\n//       <div>\r\n//         {filteredData.map((item, i) => (\r\n//           <div key={i}>\r\n//             <input\r\n//               type=\"checkbox\"\r\n//               checked={datas.includes(item)}\r\n//               onChange={() => handleChange(item)}\r\n//             />\r\n//             <span>{item}</span>\r\n//             <button\r\n//               onClick={() => setDatas((prev) => prev.filter((i) => i !== item))}\r\n//             >\r\n//               X\r\n//             </button>\r\n//           </div>\r\n//         ))}\r\n//       </div>\r\n//       <div>\r\n//         <span>{data.length - datas.length} item left!</span>\r\n//         <span>\r\n//           <button onClick={handleAll}>All</button>\r\n//           <button onClick={handleActive}>Active</button>\r\n//           <button onClick={handleCompleted}>Completed</button>\r\n//         </span>\r\n//         <button>Clear completed</button>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Todolist;\r\n\r\n\r\n\r\n"],"mappings":"AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAIA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}