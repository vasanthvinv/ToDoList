{"ast":null,"code":"var _jsxFileName = \"/root/todolist/src/todolist.tsx\",\n  _s = $RefreshSig$();\n// import React, { useReducer, useState } from \"react\";\n// import \"./App.css\";\n\n// interface State {\n//     data:[];\n//     currentValue: string,\n//     all: boolean;\n//     active:boolean,\n//     completed: boolean,\n//     datas: []\n\n// }\n// type Action = \n// |{type:'Change_to_All'; payload: boolean }\n// |{type:'Change_to_Active'; payload: boolean }\n// |{type:'Change_to_Completed'; payload: boolean }\n// |{type:'Change_to_HandleChange';payload: string}\n\n// const initialState = {\n//     data: [],\n//     currentValue: '',\n//     all: true,\n//     active:false,\n//     completed: false,\n//     datas: []\n\n// }\n\n// const reducer = (state: State,action:Action):State => {\n//     switch(action.type){\n//         case 'Change_to_All':\n//             return {\n//                 ...state ,\n//                 all: action.payload ,\n//                 active: !action.payload ,\n//                 completed: !action.payload\n//             }\n//         case 'Change_to_Active':\n//                 return {  \n//                     ...state ,\n//                     active: action.payload ,\n//                     all: !action.payload ,\n//                     completed: !action.payload\n//             }\n//          case 'Change_to_Completed':\n//                 return {  \n//                     ...state ,\n//                     completed: action.payload ,\n//                     all: !action.payload ,\n//                     active: !action.payload\n//             }\n//         case \"Change_to_HandleChange\":\n//             return{\n//                 ...state ,\n//                 datas: state.datas.includes(action.payload ) ? state.datas.filter((i) => i !== action.payload) : [...state.datas, action.payload]\n//             }\n\n//         }\n//     }\n\n// const Todolist: React.FC = () => {\n\n//     const [state , dispatch] = useReducer(reducer , initialState)\n//   const [data, setData] = useState<string[]>([]);\n//   const [currentValue, setCurrentValue] = useState(\"\");\n//   const [all, setAll] = useState(true);\n//   const [active, setActive] = useState(false);\n//   const [completed, setCompleted] = useState(false);\n//   const [datas, setDatas] = useState<string[]>([]);\n\n//   const handleAll = () => {\n//     dispatch({type: 'Change_to_All' , payload: true})\n//   };\n\n//   const handleActive = () => {\n//     dispatch({type: 'Change_to_Active' , payload: true})\n//   };\n\n//   const handleCompleted = () => {\n//     dispatch({type: 'Change_to_Completed' , payload: true})\n//   };\n\n//   const handleChange = (item: string) => {\n//     dispatch({type:'Change_to_HandleChange', payload: item})\n\n//   };\n\n//   const handleAdd = (event: React.KeyboardEvent<HTMLInputElement>) => {\n//     if (event.key === \"Enter\" && currentValue.trim()) {\n//       setData([...data, currentValue.trim()]);\n//       setCurrentValue(\"\");\n//     }\n//   };\n\n//   const filteredData = data.filter((item) => {\n//     if (all) return true;\n//     if (active) return !datas.includes(item);\n//     if (completed) return datas.includes(item);\n//     return false;\n//   });\n\n//   return (\n//     <div className=\"Todolist\">\n//       <h2>todos</h2>\n//       <div className=\"inputs\">\n//         <input\n//           placeholder=\"What needs to be done?\"\n//           value={currentValue}\n//           onChange={(e) => setCurrentValue(e.target.value)}\n//           onKeyDown={handleAdd}\n//         />\n//       </div>\n//       <div>\n//         {filteredData.map((item, i) => (\n//           <div key={i}>\n//             <input\n//               type=\"checkbox\"\n//               checked={datas.includes(item)}\n//               onChange={() => handleChange(item)}\n//             />\n//             <span>{item}</span>\n//             <button\n//               onClick={() => setDatas((prev) => prev.filter((i) => i !== item))}\n//             >\n//               X\n//             </button>\n//           </div>\n//         ))}\n//       </div>\n//       <div>\n//         <span>{data.length - datas.length} item left!</span>\n//         <span>\n//           <button onClick={handleAll}>All</button>\n//           <button onClick={handleActive}>Active</button>\n//           <button onClick={handleCompleted}>Completed</button>\n//         </span>\n//         <button>Clear completed</button>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Todolist;\n\nimport React, { useReducer } from \"react\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  data: [],\n  currentValue: '',\n  all: true,\n  active: false,\n  completed: false,\n  completedItems: []\n};\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'Change_to_All':\n      return {\n        ...state,\n        all: true,\n        active: false,\n        completed: false\n      };\n    case 'Change_to_Active':\n      return {\n        ...state,\n        all: false,\n        active: true,\n        completed: false\n      };\n    case 'Change_to_Completed':\n      return {\n        ...state,\n        all: false,\n        active: false,\n        completed: true\n      };\n    case 'Change_to_HandleChange':\n      return {\n        ...state,\n        completedItems: state.completedItems.includes(action.payload) ? state.completedItems.filter(item => item !== action.payload) : [...state.completedItems, action.payload]\n      };\n    case 'Add_Item':\n      return {\n        ...state,\n        data: [...state.data, action.payload],\n        currentValue: ''\n      };\n    case 'Clear_Completed':\n      return {\n        ...state,\n        data: state.data.filter(item => !state.completedItems.includes(item)),\n        completedItems: []\n      };\n    default:\n      return state;\n  }\n};\nconst Todolist = () => {\n  _s();\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const handleChange = item => {\n    dispatch({\n      type: 'Change_to_HandleChange',\n      payload: item\n    });\n  };\n  const handleAdd = event => {\n    if (event.key === \"Enter\" && state.currentValue.trim()) {\n      dispatch({\n        type: 'Add_Item',\n        payload: state.currentValue.trim()\n      });\n    }\n  };\n  const filteredData = state.data.filter(item => {\n    if (state.all) return true;\n    if (state.active) return !state.completedItems.includes(item);\n    if (state.completed) return state.completedItems.includes(item);\n    return false;\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Todolist\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"todos\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"inputs\",\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        placeholder: \"What needs to be done?\",\n        value: state.currentValue,\n        onChange: e => dispatch({\n          type: 'Change_to_HandleChange',\n          payload: e.target.value\n        }),\n        onKeyDown: handleAdd\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: filteredData.map((item, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          checked: state.completedItems.includes(item),\n          onChange: () => handleChange(item)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: item\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 264,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => dispatch({\n            type: 'Change_to_HandleChange',\n            payload: item\n          }),\n          children: \"X\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 265,\n          columnNumber: 25\n        }, this)]\n      }, i, true, {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        children: [state.data.length - state.completedItems.length, \" item left!\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => dispatch({\n            type: 'Change_to_All'\n          }),\n          children: \"All\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 276,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => dispatch({\n            type: 'Change_to_Active'\n          }),\n          children: \"Active\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 277,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => dispatch({\n            type: 'Change_to_Completed'\n          }),\n          children: \"Completed\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 278,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => dispatch({\n          type: 'Clear_Completed'\n        }),\n        children: \"Clear completed\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 273,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 246,\n    columnNumber: 9\n  }, this);\n};\n_s(Todolist, \"6JWkGZ32UPfojeNx+xqn8ZU8A0Q=\");\n_c = Todolist;\nexport default Todolist;\nvar _c;\n$RefreshReg$(_c, \"Todolist\");","map":{"version":3,"names":["React","useReducer","jsxDEV","_jsxDEV","initialState","data","currentValue","all","active","completed","completedItems","reducer","state","action","type","includes","payload","filter","item","Todolist","_s","dispatch","handleChange","handleAdd","event","key","trim","filteredData","className","children","fileName","_jsxFileName","lineNumber","columnNumber","placeholder","value","onChange","e","target","onKeyDown","map","i","checked","onClick","length","_c","$RefreshReg$"],"sources":["/root/todolist/src/todolist.tsx"],"sourcesContent":["// import React, { useReducer, useState } from \"react\";\r\n// import \"./App.css\";\r\n\r\n// interface State {\r\n//     data:[];\r\n//     currentValue: string,\r\n//     all: boolean;\r\n//     active:boolean,\r\n//     completed: boolean,\r\n//     datas: []\r\n\r\n// }\r\n// type Action = \r\n// |{type:'Change_to_All'; payload: boolean }\r\n// |{type:'Change_to_Active'; payload: boolean }\r\n// |{type:'Change_to_Completed'; payload: boolean }\r\n// |{type:'Change_to_HandleChange';payload: string}\r\n\r\n// const initialState = {\r\n//     data: [],\r\n//     currentValue: '',\r\n//     all: true,\r\n//     active:false,\r\n//     completed: false,\r\n//     datas: []\r\n\r\n// }\r\n\r\n// const reducer = (state: State,action:Action):State => {\r\n//     switch(action.type){\r\n//         case 'Change_to_All':\r\n//             return {\r\n//                 ...state ,\r\n//                 all: action.payload ,\r\n//                 active: !action.payload ,\r\n//                 completed: !action.payload\r\n//             }\r\n//         case 'Change_to_Active':\r\n//                 return {  \r\n//                     ...state ,\r\n//                     active: action.payload ,\r\n//                     all: !action.payload ,\r\n//                     completed: !action.payload\r\n//             }\r\n//          case 'Change_to_Completed':\r\n//                 return {  \r\n//                     ...state ,\r\n//                     completed: action.payload ,\r\n//                     all: !action.payload ,\r\n//                     active: !action.payload\r\n//             }\r\n//         case \"Change_to_HandleChange\":\r\n//             return{\r\n//                 ...state ,\r\n//                 datas: state.datas.includes(action.payload ) ? state.datas.filter((i) => i !== action.payload) : [...state.datas, action.payload]\r\n//             }\r\n\r\n//         }\r\n//     }\r\n\r\n\r\n\r\n// const Todolist: React.FC = () => {\r\n\r\n//     const [state , dispatch] = useReducer(reducer , initialState)\r\n//   const [data, setData] = useState<string[]>([]);\r\n//   const [currentValue, setCurrentValue] = useState(\"\");\r\n//   const [all, setAll] = useState(true);\r\n//   const [active, setActive] = useState(false);\r\n//   const [completed, setCompleted] = useState(false);\r\n//   const [datas, setDatas] = useState<string[]>([]);\r\n\r\n//   const handleAll = () => {\r\n//     dispatch({type: 'Change_to_All' , payload: true})\r\n//   };\r\n\r\n//   const handleActive = () => {\r\n//     dispatch({type: 'Change_to_Active' , payload: true})\r\n//   };\r\n\r\n//   const handleCompleted = () => {\r\n//     dispatch({type: 'Change_to_Completed' , payload: true})\r\n//   };\r\n\r\n//   const handleChange = (item: string) => {\r\n//     dispatch({type:'Change_to_HandleChange', payload: item})\r\n    \r\n//   };\r\n\r\n//   const handleAdd = (event: React.KeyboardEvent<HTMLInputElement>) => {\r\n//     if (event.key === \"Enter\" && currentValue.trim()) {\r\n//       setData([...data, currentValue.trim()]);\r\n//       setCurrentValue(\"\");\r\n//     }\r\n//   };\r\n\r\n//   const filteredData = data.filter((item) => {\r\n//     if (all) return true;\r\n//     if (active) return !datas.includes(item);\r\n//     if (completed) return datas.includes(item);\r\n//     return false;\r\n//   });\r\n\r\n//   return (\r\n//     <div className=\"Todolist\">\r\n//       <h2>todos</h2>\r\n//       <div className=\"inputs\">\r\n//         <input\r\n//           placeholder=\"What needs to be done?\"\r\n//           value={currentValue}\r\n//           onChange={(e) => setCurrentValue(e.target.value)}\r\n//           onKeyDown={handleAdd}\r\n//         />\r\n//       </div>\r\n//       <div>\r\n//         {filteredData.map((item, i) => (\r\n//           <div key={i}>\r\n//             <input\r\n//               type=\"checkbox\"\r\n//               checked={datas.includes(item)}\r\n//               onChange={() => handleChange(item)}\r\n//             />\r\n//             <span>{item}</span>\r\n//             <button\r\n//               onClick={() => setDatas((prev) => prev.filter((i) => i !== item))}\r\n//             >\r\n//               X\r\n//             </button>\r\n//           </div>\r\n//         ))}\r\n//       </div>\r\n//       <div>\r\n//         <span>{data.length - datas.length} item left!</span>\r\n//         <span>\r\n//           <button onClick={handleAll}>All</button>\r\n//           <button onClick={handleActive}>Active</button>\r\n//           <button onClick={handleCompleted}>Completed</button>\r\n//         </span>\r\n//         <button>Clear completed</button>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Todolist;\r\n\r\n\r\n\r\nimport React, { useReducer } from \"react\";\r\nimport \"./App.css\";\r\n\r\ninterface State {\r\n    data: string[];\r\n    currentValue: string;\r\n    all: boolean;\r\n    active: boolean;\r\n    completed: boolean;\r\n    completedItems: string[];\r\n}\r\n\r\ntype Action =\r\n    | { type: 'Change_to_All' }\r\n    | { type: 'Change_to_Active' }\r\n    | { type: 'Change_to_Completed' }\r\n    | { type: 'Change_to_HandleChange'; payload: string }\r\n    | { type: 'Add_Item'; payload: string }\r\n    | { type: 'Clear_Completed' };\r\n\r\nconst initialState: State = {\r\n    data: [],\r\n    currentValue: '',\r\n    all: true,\r\n    active: false,\r\n    completed: false,\r\n    completedItems: []\r\n};\r\n\r\nconst reducer = (state: State, action: Action): State => {\r\n    switch (action.type) {\r\n        case 'Change_to_All':\r\n            return {\r\n                ...state,\r\n                all: true,\r\n                active: false,\r\n                completed: false\r\n            };\r\n        case 'Change_to_Active':\r\n            return {\r\n                ...state,\r\n                all: false,\r\n                active: true,\r\n                completed: false\r\n            };\r\n        case 'Change_to_Completed':\r\n            return {\r\n                ...state,\r\n                all: false,\r\n                active: false,\r\n                completed: true\r\n            };\r\n        case 'Change_to_HandleChange':\r\n            return {\r\n                ...state,\r\n                completedItems: state.completedItems.includes(action.payload)\r\n                    ? state.completedItems.filter(item => item !== action.payload)\r\n                    : [...state.completedItems, action.payload]\r\n            };\r\n        case 'Add_Item':\r\n            return {\r\n                ...state,\r\n                data: [...state.data, action.payload],\r\n                currentValue: ''\r\n            };\r\n        case 'Clear_Completed':\r\n            return {\r\n                ...state,\r\n                data: state.data.filter(item => !state.completedItems.includes(item)),\r\n                completedItems: []\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nconst Todolist: React.FC = () => {\r\n    const [state, dispatch] = useReducer(reducer, initialState);\r\n\r\n    const handleChange = (item: string) => {\r\n        dispatch({ type: 'Change_to_HandleChange', payload: item });\r\n    };\r\n\r\n    const handleAdd = (event: React.KeyboardEvent<HTMLInputElement>) => {\r\n        if (event.key === \"Enter\" && state.currentValue.trim()) {\r\n            dispatch({ type: 'Add_Item', payload: state.currentValue.trim() });\r\n        }\r\n    };\r\n\r\n    const filteredData = state.data.filter(item => {\r\n        if (state.all) return true;\r\n        if (state.active) return !state.completedItems.includes(item);\r\n        if (state.completed) return state.completedItems.includes(item);\r\n        return false;\r\n    });\r\n\r\n    return (\r\n        <div className=\"Todolist\">\r\n            <h2>todos</h2>\r\n            <div className=\"inputs\">\r\n                <input\r\n                    placeholder=\"What needs to be done?\"\r\n                    value={state.currentValue}\r\n                    onChange={(e) => dispatch({ type: 'Change_to_HandleChange', payload: e.target.value })}\r\n                    onKeyDown={handleAdd}\r\n                />\r\n            </div>\r\n            <div>\r\n                {filteredData.map((item, i) => (\r\n                    <div key={i}>\r\n                        <input\r\n                            type=\"checkbox\"\r\n                            checked={state.completedItems.includes(item)}\r\n                            onChange={() => handleChange(item)}\r\n                        />\r\n                        <span>{item}</span>\r\n                        <button\r\n                            onClick={() => dispatch({ type: 'Change_to_HandleChange', payload: item })}\r\n                        >\r\n                            X\r\n                        </button>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n            <div>\r\n                <span>{state.data.length - state.completedItems.length} item left!</span>\r\n                <span>\r\n                    <button onClick={() => dispatch({ type: 'Change_to_All' })}>All</button>\r\n                    <button onClick={() => dispatch({ type: 'Change_to_Active' })}>Active</button>\r\n                    <button onClick={() => dispatch({ type: 'Change_to_Completed' })}>Completed</button>\r\n                </span>\r\n                <button onClick={() => dispatch({ type: 'Clear_Completed' })}>Clear completed</button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Todolist;\r\n"],"mappings":";;AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAIA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA,OAAOA,KAAK,IAAIC,UAAU,QAAQ,OAAO;AACzC,OAAO,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAmBnB,MAAMC,YAAmB,GAAG;EACxBC,IAAI,EAAE,EAAE;EACRC,YAAY,EAAE,EAAE;EAChBC,GAAG,EAAE,IAAI;EACTC,MAAM,EAAE,KAAK;EACbC,SAAS,EAAE,KAAK;EAChBC,cAAc,EAAE;AACpB,CAAC;AAED,MAAMC,OAAO,GAAGA,CAACC,KAAY,EAAEC,MAAc,KAAY;EACrD,QAAQA,MAAM,CAACC,IAAI;IACf,KAAK,eAAe;MAChB,OAAO;QACH,GAAGF,KAAK;QACRL,GAAG,EAAE,IAAI;QACTC,MAAM,EAAE,KAAK;QACbC,SAAS,EAAE;MACf,CAAC;IACL,KAAK,kBAAkB;MACnB,OAAO;QACH,GAAGG,KAAK;QACRL,GAAG,EAAE,KAAK;QACVC,MAAM,EAAE,IAAI;QACZC,SAAS,EAAE;MACf,CAAC;IACL,KAAK,qBAAqB;MACtB,OAAO;QACH,GAAGG,KAAK;QACRL,GAAG,EAAE,KAAK;QACVC,MAAM,EAAE,KAAK;QACbC,SAAS,EAAE;MACf,CAAC;IACL,KAAK,wBAAwB;MACzB,OAAO;QACH,GAAGG,KAAK;QACRF,cAAc,EAAEE,KAAK,CAACF,cAAc,CAACK,QAAQ,CAACF,MAAM,CAACG,OAAO,CAAC,GACvDJ,KAAK,CAACF,cAAc,CAACO,MAAM,CAACC,IAAI,IAAIA,IAAI,KAAKL,MAAM,CAACG,OAAO,CAAC,GAC5D,CAAC,GAAGJ,KAAK,CAACF,cAAc,EAAEG,MAAM,CAACG,OAAO;MAClD,CAAC;IACL,KAAK,UAAU;MACX,OAAO;QACH,GAAGJ,KAAK;QACRP,IAAI,EAAE,CAAC,GAAGO,KAAK,CAACP,IAAI,EAAEQ,MAAM,CAACG,OAAO,CAAC;QACrCV,YAAY,EAAE;MAClB,CAAC;IACL,KAAK,iBAAiB;MAClB,OAAO;QACH,GAAGM,KAAK;QACRP,IAAI,EAAEO,KAAK,CAACP,IAAI,CAACY,MAAM,CAACC,IAAI,IAAI,CAACN,KAAK,CAACF,cAAc,CAACK,QAAQ,CAACG,IAAI,CAAC,CAAC;QACrER,cAAc,EAAE;MACpB,CAAC;IACL;MACI,OAAOE,KAAK;EACpB;AACJ,CAAC;AAED,MAAMO,QAAkB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC7B,MAAM,CAACR,KAAK,EAAES,QAAQ,CAAC,GAAGpB,UAAU,CAACU,OAAO,EAAEP,YAAY,CAAC;EAE3D,MAAMkB,YAAY,GAAIJ,IAAY,IAAK;IACnCG,QAAQ,CAAC;MAAEP,IAAI,EAAE,wBAAwB;MAAEE,OAAO,EAAEE;IAAK,CAAC,CAAC;EAC/D,CAAC;EAED,MAAMK,SAAS,GAAIC,KAA4C,IAAK;IAChE,IAAIA,KAAK,CAACC,GAAG,KAAK,OAAO,IAAIb,KAAK,CAACN,YAAY,CAACoB,IAAI,CAAC,CAAC,EAAE;MACpDL,QAAQ,CAAC;QAAEP,IAAI,EAAE,UAAU;QAAEE,OAAO,EAAEJ,KAAK,CAACN,YAAY,CAACoB,IAAI,CAAC;MAAE,CAAC,CAAC;IACtE;EACJ,CAAC;EAED,MAAMC,YAAY,GAAGf,KAAK,CAACP,IAAI,CAACY,MAAM,CAACC,IAAI,IAAI;IAC3C,IAAIN,KAAK,CAACL,GAAG,EAAE,OAAO,IAAI;IAC1B,IAAIK,KAAK,CAACJ,MAAM,EAAE,OAAO,CAACI,KAAK,CAACF,cAAc,CAACK,QAAQ,CAACG,IAAI,CAAC;IAC7D,IAAIN,KAAK,CAACH,SAAS,EAAE,OAAOG,KAAK,CAACF,cAAc,CAACK,QAAQ,CAACG,IAAI,CAAC;IAC/D,OAAO,KAAK;EAChB,CAAC,CAAC;EAEF,oBACIf,OAAA;IAAKyB,SAAS,EAAC,UAAU;IAAAC,QAAA,gBACrB1B,OAAA;MAAA0B,QAAA,EAAI;IAAK;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACd9B,OAAA;MAAKyB,SAAS,EAAC,QAAQ;MAAAC,QAAA,eACnB1B,OAAA;QACI+B,WAAW,EAAC,wBAAwB;QACpCC,KAAK,EAAEvB,KAAK,CAACN,YAAa;QAC1B8B,QAAQ,EAAGC,CAAC,IAAKhB,QAAQ,CAAC;UAAEP,IAAI,EAAE,wBAAwB;UAAEE,OAAO,EAAEqB,CAAC,CAACC,MAAM,CAACH;QAAM,CAAC,CAAE;QACvFI,SAAS,EAAEhB;MAAU;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACxB;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD,CAAC,eACN9B,OAAA;MAAA0B,QAAA,EACKF,YAAY,CAACa,GAAG,CAAC,CAACtB,IAAI,EAAEuB,CAAC,kBACtBtC,OAAA;QAAA0B,QAAA,gBACI1B,OAAA;UACIW,IAAI,EAAC,UAAU;UACf4B,OAAO,EAAE9B,KAAK,CAACF,cAAc,CAACK,QAAQ,CAACG,IAAI,CAAE;UAC7CkB,QAAQ,EAAEA,CAAA,KAAMd,YAAY,CAACJ,IAAI;QAAE;UAAAY,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACtC,CAAC,eACF9B,OAAA;UAAA0B,QAAA,EAAOX;QAAI;UAAAY,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC,eACnB9B,OAAA;UACIwC,OAAO,EAAEA,CAAA,KAAMtB,QAAQ,CAAC;YAAEP,IAAI,EAAE,wBAAwB;YAAEE,OAAO,EAAEE;UAAK,CAAC,CAAE;UAAAW,QAAA,EAC9E;QAED;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA,GAXHQ,CAAC;QAAAX,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAYN,CACR;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD,CAAC,eACN9B,OAAA;MAAA0B,QAAA,gBACI1B,OAAA;QAAA0B,QAAA,GAAOjB,KAAK,CAACP,IAAI,CAACuC,MAAM,GAAGhC,KAAK,CAACF,cAAc,CAACkC,MAAM,EAAC,aAAW;MAAA;QAAAd,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC,eACzE9B,OAAA;QAAA0B,QAAA,gBACI1B,OAAA;UAAQwC,OAAO,EAAEA,CAAA,KAAMtB,QAAQ,CAAC;YAAEP,IAAI,EAAE;UAAgB,CAAC,CAAE;UAAAe,QAAA,EAAC;QAAG;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eACxE9B,OAAA;UAAQwC,OAAO,EAAEA,CAAA,KAAMtB,QAAQ,CAAC;YAAEP,IAAI,EAAE;UAAmB,CAAC,CAAE;UAAAe,QAAA,EAAC;QAAM;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eAC9E9B,OAAA;UAAQwC,OAAO,EAAEA,CAAA,KAAMtB,QAAQ,CAAC;YAAEP,IAAI,EAAE;UAAsB,CAAC,CAAE;UAAAe,QAAA,EAAC;QAAS;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAClF,CAAC,eACP9B,OAAA;QAAQwC,OAAO,EAAEA,CAAA,KAAMtB,QAAQ,CAAC;UAAEP,IAAI,EAAE;QAAkB,CAAC,CAAE;QAAAe,QAAA,EAAC;MAAe;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACrF,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEd,CAAC;AAACb,EAAA,CA3DID,QAAkB;AAAA0B,EAAA,GAAlB1B,QAAkB;AA6DxB,eAAeA,QAAQ;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}