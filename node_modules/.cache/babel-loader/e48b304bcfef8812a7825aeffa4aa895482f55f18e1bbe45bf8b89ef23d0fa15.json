{"ast":null,"code":"// import React, { useState } from \"react\";\n// import \"./App.css\";\n\n// interface Todo {\n//   data: string;\n//   completed: boolean;\n// }\n\n// const Input: React.FC<{\n//   data: Todo[];\n//   setData: React.Dispatch<React.SetStateAction<Todo[]>>;\n//   currentValue: string;\n//   setCurrentValue: React.Dispatch<React.SetStateAction<string>>;\n// }> = ({ data, setData, currentValue, setCurrentValue }) => {\n//   const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n//     setCurrentValue(event.target.value);\n//   };\n\n//   const handleAdd = (event: React.KeyboardEvent<HTMLInputElement>) => {\n//     if (event.key === \"Enter\" && currentValue.trim()) {\n//       setData([...data, { data: currentValue.trim(), completed: false }]);\n//       setCurrentValue(\"\");\n//       console.log(data);\n\n//     }\n//   };\n\n//   return (\n//     <div className=\"inputs\">\n//       <input\n//         placeholder=\"What needs to be done?\"\n//         value={currentValue}\n//         onChange={handleChange}\n//         onKeyDown={handleAdd}\n//       />\n//     </div>\n//   );\n// };\n\n// const List: React.FC<{\n//   data: Todo[];\n//   all: boolean;\n//   active: boolean;\n//   completed: boolean;\n//   setData: React.Dispatch<React.SetStateAction<Todo[]>>;\n// }> = ({ data, all, active, completed, setData }) => {\n//   const handleChange = (item: Todo) => {\n//     setData((prev) =>\n//       prev.map((todo) =>\n//         todo.data === item.data ? { ...todo, completed: !todo.completed } : todo\n//       )\n//     );\n//   };\n\n//   const filteredData = data.filter((item) => {\n//     if (all) return true;\n//     if (active) return !item.completed;\n//     if (completed) return item.completed;\n//     return false;\n//   });\n\n//   return (\n//     <div>\n//       {filteredData.map((item, i) => (\n//         <div key={i}>\n//           <input\n//             type=\"checkbox\"\n//             checked={item.completed}\n//             onChange={() => handleChange(item)}\n//           />\n//           <span>{item.data}</span>\n//           <button\n//             onClick={() => setData((prev) => prev.filter((todo) => todo.data !== item.data))}\n//           >\n//             X\n//           </button>\n//         </div>\n//       ))}\n//     </div>\n//   );\n// };\n\n// const Details: React.FC<{\n//   data: Todo[];\n//   all: boolean;\n//   active: boolean;\n//   completed: boolean;\n//   handleAll: () => void;\n//   handleActive: () => void;\n//   handleCompleted: () => void;\n// }> = ({ data, all, active, completed, handleAll, handleActive, handleCompleted }) => {\n//   const activeCount = data.filter((item) => !item.completed).length;\n\n//   return (\n//     <div>\n//       <span>{activeCount} item left!</span>\n//       <span>\n//         <button onClick={handleAll}>All</button>\n//         <button onClick={handleActive}>Active</button>\n//         <button onClick={handleCompleted}>Completed</button>\n//       </span>\n//       <button\n//       >\n//         Clear completed\n//       </button>\n//     </div>\n//   );\n// };\n\n// const App: React.FC = () => {\n//   const [data, setData] = useState<Todo[]>([]);\n//   const [currentValue, setCurrentValue] = useState(\"\");\n//   const [all, setAll] = useState(true);\n//   const [active, setActive] = useState(false);\n//   const [completed, setCompleted] = useState(false);\n\n//   const handleAll = () => {\n//     setAll(true);\n//     setActive(false);\n//     setCompleted(false);\n//   };\n\n//   const handleActive = () => {\n//     setAll(false);\n//     setActive(true);\n//     setCompleted(false);\n//   };\n\n//   const handleCompleted = () => {\n//     setAll(false);\n//     setActive(false);\n//     setCompleted(true);\n//   };\n\n//   return (\n//     <div className=\"App\">\n//       <h2>todos</h2>\n//       <Input\n//         data={data}\n//         setData={setData}\n//         currentValue={currentValue}\n//         setCurrentValue={setCurrentValue}\n//       />\n//       <List\n//         data={data}\n//         all={all}\n//         active={active}\n//         completed={completed}\n//         setData={setData}\n//       />\n//       <Details\n//         data={data}\n//         all={all}\n//         active={active}\n//         completed={completed}\n//         handleAll={handleAll}\n//         handleActive={handleActive}\n//         handleCompleted={handleCompleted}\n//       />\n//     </div>\n//   );\n// };\n\n// export default App;","map":{"version":3,"names":[],"sources":["/root/todolist/src/todolist.tsx"],"sourcesContent":["// import React, { useState } from \"react\";\r\n// import \"./App.css\";\r\n\r\n// interface Todo {\r\n//   data: string;\r\n//   completed: boolean;\r\n// }\r\n\r\n// const Input: React.FC<{\r\n//   data: Todo[];\r\n//   setData: React.Dispatch<React.SetStateAction<Todo[]>>;\r\n//   currentValue: string;\r\n//   setCurrentValue: React.Dispatch<React.SetStateAction<string>>;\r\n// }> = ({ data, setData, currentValue, setCurrentValue }) => {\r\n//   const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n//     setCurrentValue(event.target.value);\r\n//   };\r\n\r\n//   const handleAdd = (event: React.KeyboardEvent<HTMLInputElement>) => {\r\n//     if (event.key === \"Enter\" && currentValue.trim()) {\r\n//       setData([...data, { data: currentValue.trim(), completed: false }]);\r\n//       setCurrentValue(\"\");\r\n//       console.log(data);\r\n      \r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"inputs\">\r\n//       <input\r\n//         placeholder=\"What needs to be done?\"\r\n//         value={currentValue}\r\n//         onChange={handleChange}\r\n//         onKeyDown={handleAdd}\r\n//       />\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// const List: React.FC<{\r\n//   data: Todo[];\r\n//   all: boolean;\r\n//   active: boolean;\r\n//   completed: boolean;\r\n//   setData: React.Dispatch<React.SetStateAction<Todo[]>>;\r\n// }> = ({ data, all, active, completed, setData }) => {\r\n//   const handleChange = (item: Todo) => {\r\n//     setData((prev) =>\r\n//       prev.map((todo) =>\r\n//         todo.data === item.data ? { ...todo, completed: !todo.completed } : todo\r\n//       )\r\n//     );\r\n//   };\r\n\r\n//   const filteredData = data.filter((item) => {\r\n//     if (all) return true;\r\n//     if (active) return !item.completed;\r\n//     if (completed) return item.completed;\r\n//     return false;\r\n//   });\r\n\r\n//   return (\r\n//     <div>\r\n//       {filteredData.map((item, i) => (\r\n//         <div key={i}>\r\n//           <input\r\n//             type=\"checkbox\"\r\n//             checked={item.completed}\r\n//             onChange={() => handleChange(item)}\r\n//           />\r\n//           <span>{item.data}</span>\r\n//           <button\r\n//             onClick={() => setData((prev) => prev.filter((todo) => todo.data !== item.data))}\r\n//           >\r\n//             X\r\n//           </button>\r\n//         </div>\r\n//       ))}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// const Details: React.FC<{\r\n//   data: Todo[];\r\n//   all: boolean;\r\n//   active: boolean;\r\n//   completed: boolean;\r\n//   handleAll: () => void;\r\n//   handleActive: () => void;\r\n//   handleCompleted: () => void;\r\n// }> = ({ data, all, active, completed, handleAll, handleActive, handleCompleted }) => {\r\n//   const activeCount = data.filter((item) => !item.completed).length;\r\n\r\n//   return (\r\n//     <div>\r\n//       <span>{activeCount} item left!</span>\r\n//       <span>\r\n//         <button onClick={handleAll}>All</button>\r\n//         <button onClick={handleActive}>Active</button>\r\n//         <button onClick={handleCompleted}>Completed</button>\r\n//       </span>\r\n//       <button\r\n//       >\r\n//         Clear completed\r\n//       </button>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// const App: React.FC = () => {\r\n//   const [data, setData] = useState<Todo[]>([]);\r\n//   const [currentValue, setCurrentValue] = useState(\"\");\r\n//   const [all, setAll] = useState(true);\r\n//   const [active, setActive] = useState(false);\r\n//   const [completed, setCompleted] = useState(false);\r\n\r\n//   const handleAll = () => {\r\n//     setAll(true);\r\n//     setActive(false);\r\n//     setCompleted(false);\r\n//   };\r\n\r\n//   const handleActive = () => {\r\n//     setAll(false);\r\n//     setActive(true);\r\n//     setCompleted(false);\r\n//   };\r\n\r\n//   const handleCompleted = () => {\r\n//     setAll(false);\r\n//     setActive(false);\r\n//     setCompleted(true);\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"App\">\r\n//       <h2>todos</h2>\r\n//       <Input\r\n//         data={data}\r\n//         setData={setData}\r\n//         currentValue={currentValue}\r\n//         setCurrentValue={setCurrentValue}\r\n//       />\r\n//       <List\r\n//         data={data}\r\n//         all={all}\r\n//         active={active}\r\n//         completed={completed}\r\n//         setData={setData}\r\n//       />\r\n//       <Details\r\n//         data={data}\r\n//         all={all}\r\n//         active={active}\r\n//         completed={completed}\r\n//         handleAll={handleAll}\r\n//         handleActive={handleActive}\r\n//         handleCompleted={handleCompleted}\r\n//       />\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default App;\r\n"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}