{"ast":null,"code":"var _jsxFileName = \"/root/todolist/src/list.tsx\";\n// import React, { useState } from \"react\";\n\n// interface InputProps {\n//     data: string[];\n//     setData: React.Dispatch<React.SetStateAction<string[]>>;\n//     currentValue: string;\n//     setCurrentValue: React.Dispatch<React.SetStateAction<string>>;\n//   }\n\n// const List: React.FC<InputProps>  = ({ data, all,active,completed}) => { \n//      return (\n//     <div>\n//       {data.map((item, i) => (\n//        {all && <span>\n//           <input type=\"checkbox\" />\n//           <td key={i}>{item}</td>\n//           <button>X</button>\n//         </span>}\n//         {active && <span>\n//             <input type=\"checkbox\" />\n//             <td key={i}>{item}</td>\n//             <button>X</button>\n//           </span>}\n//           {completed && <span>\n//             <input type=\"checkbox\" />\n//             <td key={i}>{item}</td>\n//             <button>X</button>\n//           </span>}\n//       ))}\n//     </div>\n//   );\n// }\n\n// export default List;\n\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst List = ({\n  data,\n  all,\n  active,\n  completed\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: data.map((item, i) => {\n      if (all || active && item.includes('active') || completed && item.includes('completed')) {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: item\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            children: \"X\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 29\n          }, this)]\n        }, i, true, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 25\n        }, this);\n      }\n      return null;\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 9\n  }, this);\n};\n_c = List;\nexport default List;\nvar _c;\n$RefreshReg$(_c, \"List\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","List","data","all","active","completed","children","map","item","i","includes","type","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/root/todolist/src/list.tsx"],"sourcesContent":["// import React, { useState } from \"react\";\r\n\r\n// interface InputProps {\r\n//     data: string[];\r\n//     setData: React.Dispatch<React.SetStateAction<string[]>>;\r\n//     currentValue: string;\r\n//     setCurrentValue: React.Dispatch<React.SetStateAction<string>>;\r\n//   }\r\n\r\n// const List: React.FC<InputProps>  = ({ data, all,active,completed}) => { \r\n//      return (\r\n//     <div>\r\n//       {data.map((item, i) => (\r\n//        {all && <span>\r\n//           <input type=\"checkbox\" />\r\n//           <td key={i}>{item}</td>\r\n//           <button>X</button>\r\n//         </span>}\r\n//         {active && <span>\r\n//             <input type=\"checkbox\" />\r\n//             <td key={i}>{item}</td>\r\n//             <button>X</button>\r\n//           </span>}\r\n//           {completed && <span>\r\n//             <input type=\"checkbox\" />\r\n//             <td key={i}>{item}</td>\r\n//             <button>X</button>\r\n//           </span>}\r\n//       ))}\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default List;\r\n\r\nimport React from \"react\";\r\n\r\ninterface ListProps {\r\n    data: string[];\r\n    all: boolean;\r\n    active: boolean;\r\n    completed: boolean;\r\n}\r\n\r\nconst List: React.FC<ListProps> = ({ data, all, active, completed }) => {\r\n    return (\r\n        <div>\r\n            {data.map((item, i) => {\r\n                if (all || (active && item.includes('active')) || (completed && item.includes('completed'))) {\r\n                    return (\r\n                        <div key={i}>\r\n                            <input type=\"checkbox\" />\r\n                            <span>{item}</span>\r\n                            <button>X</button>\r\n                        </div>\r\n                    );\r\n                }\r\n                return null;\r\n            })}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default List;\r\n\r\n"],"mappings":";AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAS1B,MAAMC,IAAyB,GAAGA,CAAC;EAAEC,IAAI;EAAEC,GAAG;EAAEC,MAAM;EAAEC;AAAU,CAAC,KAAK;EACpE,oBACIL,OAAA;IAAAM,QAAA,EACKJ,IAAI,CAACK,GAAG,CAAC,CAACC,IAAI,EAAEC,CAAC,KAAK;MACnB,IAAIN,GAAG,IAAKC,MAAM,IAAII,IAAI,CAACE,QAAQ,CAAC,QAAQ,CAAE,IAAKL,SAAS,IAAIG,IAAI,CAACE,QAAQ,CAAC,WAAW,CAAE,EAAE;QACzF,oBACIV,OAAA;UAAAM,QAAA,gBACIN,OAAA;YAAOW,IAAI,EAAC;UAAU;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,eACzBf,OAAA;YAAAM,QAAA,EAAOE;UAAI;YAAAI,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC,eACnBf,OAAA;YAAAM,QAAA,EAAQ;UAAC;YAAAM,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC;QAAA,GAHZN,CAAC;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAIN,CAAC;MAEd;MACA,OAAO,IAAI;IACf,CAAC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAEd,CAAC;AAAAC,EAAA,GAjBKf,IAAyB;AAmB/B,eAAeA,IAAI;AAAC,IAAAe,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}